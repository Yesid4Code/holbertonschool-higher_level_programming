The "0-add_integer" module
============================
Using "add_integer" function
----------------------------

Import "add_integer" from "0-add
       >>> add_integer = __import__('0-add_integer').add_integer

Normal cases:
Should return sum of two positive integers:
       >>> add_integer(1, 1)
       2

Should return sum of two numbers with different sign:
       >>> add_integer(1, -1)
       0

Should return sum if both numbers are negatives:
       >>> add_integer(-1, -1)
       -2


Float cases:
Should return sum of two numbers as integer if one of them is float:
       >>> add_integer(1, 1.1)
       2

Should return the sum of two numbers as integer if both numbers are float:
       >>> add_integer(1.1, -1.1)
       0

Should return the sum of two numbers as integer if one or both numbers are long numbers:
       >>> add_integer(99999999999999999999999999999999999999, 1)
       100000000000000000000000000000000000000

Infinity case:
Should return an error:
       >>> add_integer(float('inf'), 1)
       Traceback (most recent call last):
       OverflowError: cannot convert float infinity to integer


Bool cases:
Should return error if a bool argument is send:
       >>> add_integer(True, 1)
       Traceback (most recent call last):
       TypeError: a must be and integer an integer

Should return error if a bool argument  is send:
       >>> add_integer(0, False)
       Traceback (most recent call last):
       TypeError: b must be and integer an integer


One or more arguments cases:
Should return the sum if only one number is providen:
       >>> add_integer(1)
       99

Should return an error if one argument is none:
       >>> add_integer(1, None)
       Traceback (most recent call last):
       TypeError: b must be and integer an integer

Should return:
       >>> add_integer(1, 2, 3)
       Traceback (most recent call last):
       TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given


None argument cases:
Should return an error:
       >>> add_integer()
       Traceback (most recent call last):
       TypeError: add_integer() missing 1 required positional argument: 'a'

Should return an error:
       >>> add_integer(None)
       Traceback (most recent call last):
       TypeError: a must be and integer an integer

Should return an error:
       >>> add_integer(float('nan'), 3)
       Traceback (most recent call last):
       ValueError: cannot convert float NaN to integer


List and tuples cases:
Should return an error:
       >>> add_integer([2, 4, 5], 2)
       Traceback (most recent call last):
       TypeError: a must be and integer an integer

Should return an error:
       >>> add_integer(1, (1, 1))
       Traceback (most recent call last):
       TypeError: b must be and integer an integer


String cases:
Should return an error:
       >>> add_integer("a", 2)
       Traceback (most recent call last):
       TypeError: a must be and integer an integer

Should return an error:
       >>> add_integer(2, "b")
       Traceback (most recent call last):
       TypeError: b must be and integer an integer

Should return an error:
       >>> add_integer(b, 2)
       Traceback (most recent call last):
       NameError: name 'b' is not defined

Should return an error:
       >>> add_integer(98, "Holberton")
       Traceback (most recent call last):
       TypeError: b must be and integer an integer

Should return an error:
       >>> add_integer("Hello", "World")
       Traceback (most recent call last):
       TypeError: a must be and integer an integer
